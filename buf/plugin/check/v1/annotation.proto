// Copyright 2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.plugin.check.v1;

import "buf/plugin/check/v1/location.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/bufplugin/protocolbuffers/go/buf/plugin/check/v1";

// An annotation representing a Rule failure.
//
// Annotations are propagated back to Buf and returned as lint or breaking change failures.
message Annotation {
  // The ID of the Rule that failed.
  //
  // Required.
  //
  // This must match an ID that the plugin has declared via its list rules RPC.
  string rule_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 3
      max_len: 64
      pattern: "^[A-Z0-9][A-Z0-9_]*[A-Z0-9]$"
    }
  ];
  // A user-displayable message that explains the rule failure.
  //
  // Optional.
  string message = 2;
  // The location of the failure in a FileDescriptor within the file_descriptors list.
  //
  // Optional.
  Location location = 3;
  // The location of the failure in a FileDescriptor in the against_file_descriptors list.
  //
  // Optional.
  //
  // This may be present even if location is not present. For example, if a file was deleted,
  // this may reference the deleted FileDescriptor in against_file_descriptors, while location
  // will not be present.
  Location against_location = 4;
}
